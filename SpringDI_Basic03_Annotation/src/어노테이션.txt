*의존성 자동 주입 (DI)
*Annotation : 
클래스 , 필드 , 메서드 과 같은 프로그램 요소에 다양한 종류의 정보를 주는 방법

장점 : 코드량 감소 
단점 : 가독성은 떨어진다 

1. xml 기술
2. annotation 기술(70%)


EX)
-Java    :  @override
-Servlet : @WebServlet()
------------------------------------------------------
1.****************************************************
@Autowired > Type기반
목적 : 의존관계를 자동설정할 때 사용하며 [타입을 이용]하여 의존하는 객체를 삽입해 준다. 
그러므로 (IOC Container) 해당 타입의 빈객체가 존재하지 않거나 또는 2개 이상 존재할 경우 
스프링은 예외를 발생시키게 된다.

설정 위치 : 생성자, 필드, 메소드(굳이 setter메소드가 아니여도 된다)
*추가설정 : AutowiredAnnotationBeanPostProcessor 클래스를 빈으로 등록시켜줘야 한다. 
해당 설정 대신에 <context:annotation-config> 태그를 사용해도 된다.
옵션 : required - 
@Autowired어노테이션을 적용한 프로퍼티에 대해 굳이 설정할 필요가 없는 경우에 
false값을 주며 이때 해당 프로퍼티가 존재하지 않더라도 스프링은 예외를 발생시키지 않는다. 디폴트값은 true

2.*********************
@Qualifier
목적 : @Autowired의 목적에서 동일 타입의 빈객체가 존재시 특정빈을 삽입할 수 있게 설정한다. 
설정위치 : @Autowired 어노테이션과 함께 사용된다.
추가설정 : 동일타입의 빈객체 설정에서 <qualifier value="[alias명]" />를 추가하여 준다.
옵션 : name - alias명

3.*********************
@Required
목적 : 필수 [프로퍼티]를 지정 
설정 위치 : setter메소드
추가설정 : RequiredAnnotationBeanPostProcessor 클래스를 빈으로 등록시켜줘야 한다. 
해당 설정 대신에<context:annotation-config> 태그를 사용해도 된다.


class User{
 private String name;
 
 @Required  > 반드시 setter 에 값을 주입하겠다
 public setName(String name){
    this.name = name; 
 }

}

=> ApplicationContext.xml 에서
     
     <context:annotation-config>
     <bean id="user" class="DI_Annotation_03.User">
            아래 부분이 있어야 @Required 어노테이션 만족
         <property name="name" value="kglim"></property>
     </bean>

4. ***************************** 
@Resource
목적 : 어플리케이션에서 필요로 하는 자원을 자동 연결(의존하는 빈 객체 전달)할 때 사용
       @Autowired 와 같은 기능을 하며 
       @Autowired와 차이점은 
       @Autowired는 타입으로(by type),  
       @Resource는 이름으로(by name)으로 연결시켜준다는 것이다.
설정위치 : 프로퍼티, setter메소드
추가설정 : CommonAnnotationBeanPostProcessor 클래스를 빈으로 등록시켜줘야 한다. 
해당 설정 대신에 <context:annotation-config> 태그를 사용해도 된다.
옵션 : name 


5. ******************************************************************
객체의 생성과 조립(삽입) -> Spring 통해서 작업
-> xml 을 통해서 필요한 bean의 생성과 injection 처리
-> xml 없이도 지금와 동일한 작업이 가능
   => 자바코드 이용한 설정(자바코드 + Annotation )
   => xml (x)
   
   
선택사항 : xml 사용 또는  xml  설정없이 사용가능 (편리성에 따라서)
->xml문법 대신 자바코드를 이용해서 빈객체를 생성하고 프로퍼티 설정 가능

기존
ApplicationContext context =  
new GenericXmlApplicationContext("classpath:ApplicationContext04.xml");

현재
new AnnotationConfigApplicationContext()


사용 어노테이션은
1.  @Configuration :해당 클래스가 스프링의 설정으로 사용됨을 지정
    ex)
    @Configuration
    public class configcontext {}

2.  @Bean
    ex)
    @Configuration
    public class configcontext {
      
       @Bean
       public User user(){
         return new User();
       }
       
       xml 에서 아래코드과 같은 형태를 위 코드처럼 함수(method) 의 형태로 설계 
       <bean id="user" class="DI.User">
    }
    
result :
> 어노테이션과 [메서드 이름]을 이용해서 스프링 컨테이너가 사용할 빈 객체 설정
> 메서드가 리턴하는 객체를 빈객체로 사용하겠다

class MemberRegisterService{
   private MemberDao memberdao;
   public MemberRegisterService(MemberDao memberdao){
      this.memberdao = memberdao;
   }
}

1. xml 설정
<bean id="memberRegSvc" class="MemberRegisterService">
 <constructor-arg  ref="memberdao">
</bean>
<bean id="memberdao" class="MemberDao" />
   
2. @Configuration
   @bean
   두개의 어노테이션을 이용해서 (java 코드 기반의 작업)
   
   @Configuration
   class Configcontext{
         
         @bean
         public MemberRegisterService memberRegSvc(){
           return new MemberRegisterService(memberdao());
         } 
         
         @bean
         public MemberDao memberdao(){
          return new MemberDao();
         }
   }
   
-------------------------------------------------------------
옵션 :
<bean id="m" class="board"></bean>

=> 자바코드
@bean
public board m(){
  return new board();
}

옵션_1
@bean(name="hello")
public board m(){
  return new board();
}