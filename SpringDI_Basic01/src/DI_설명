	
	[DI 개념] : 의존성 주입 (의존 객체 주입)
	
	프로젝트 >> 수 많은 클래스 생성 >> 클래스들간의 관계를 통해 구현
	
	관계..
	1. 상속( is ~ a )
	2. 포함( has ~ a )
	
	A라는 클래스는 B라는 클래스가 필요하다. (A가 B의 자원을 사용 가능하게)
	
	- 상속 -
	class A extends B { ... }
	
	- 포함(복합연관) -
	class A {
	 	B b;
	 	public A(){
	 		b = new B();
	 	}
	 }
	 - 포함(집합연관) -
	 class A {
	 	B b;
	 	public A(B b) {
	 		this.b = b;
	 	}
	 }
	 
	 - 포함(의존관계) -
	 [함수에서] 라는 전제조건
	 class A{
	 	public B print(B b){
	 		return b;
	 	}
	 }
	 
	 ------------------------------------------------
	 
	 NewRecordView 클래스는 NewRecord를 필요로 한다.
	 NewRecordView 클래스가 필요한 객체를 [생성자]를 통해서 생성하고 있다.(포함 - 복합 연관 관계)
	 NewRecordView 클래스가 필요한 객체를 [생성자/함수]를 통해서 주입하고 있다.(포함 - 집합 연관 관계)
	 
	 DI : 의존성 주입 : Spring 학습에 처음 나오는 개념
	 결론 : 필요한 객체를 [생성자]를 통해서 그 주소를 [주입 받을]/[생성할] 수 있다
	 
	 ------------------------------------------------
	 
	 [DI 개념 2] : 의존성 주입(의존 객체 주입)
	 - NewRecordView 클래스는 필요로 하는 객체를 setter 함수를 통해 주입(주소를) 받아서 사용
	 - 객체의 생성이 서로 독립적 >> 필요사에 객체를 주입 받을 수 있다.
		 	NewRecordView view = new NewRecordView();
		 	NewRecord record = new NewRecord();
	 - 두 객체의 lifecycle 은 같지 않다.
	 
	 ------------------------------------------------
	 
	 시나리오
	 class A , class B
	 A라는 클래스가 B라는 클래스를 사용하는 방법의 종류
	 
	 1. 상속 ( is ~ a )    >> Spring FrameWork 에서는 관심이 없다.
	 2. 포함 ( has ~ a) >> 내 클래스 안에 다른 클래스가 들어오는 것
	 2.1 생성자로 주입(constructor injection)
	 2.2 함수로 주입 (setter injection)
	 2.3 생성자로 생성?

	결론 : SpringFramework 은 다른 객체의 의존(참조)을 하기 위해서 
	생성자를 주입(constructor injection) , setter(setter injection) 주입 2가지 방법을 통해서 구현한다.
	
	이러한 기술을 통칭해서 >> DI(dependency injection) >> 의존성 주입이라고 한다.
	
	>>>>interface 가 들어가면 금상첨화 >> 다형성 + 느슨한 구조
	
	정리)
	1. 생성자를 통해서 주입할 수 있다(의무/강제)
	2. setter 함수를 통해서 주입 할 수 있다.(필요에 따라서)
	3. 다형성(인터페이스)를 활용 ... (생성자 , setter 함수)
	
	------------------------------------------------
	
	SpringFramework 사용
	
	1. Spring.io 사이트 방문
	1.1 사용하려는 버전을 확인하고 다운로드
	
	구버전 : 다운로드 지원
	https://repo.spring.io/ui/native/release/org/springframework/spring/
	
	수업이니까 다운로드를 받아서 프로젝트에 추가...
	
	현업에서는 (Maven) : 사이트 >> 필요로 하는 다양한 jab 파일 가지고 있음 >> 다운하지 않아도
	1. 메이븐 사이트에서 https://mvnrepository.com/search?q=spring
	2. 원하는 기능의 주소를 복사해서 pom.xml 파일에 붙여 넣으면 자동으로 다운로드
			<!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
			<dependency>
			    <groupId>org.springframework</groupId>
			    <artifactId>spring-core</artifactId>
			    <version>5.3.6</version>
			</dependency> 
	
	------------------------------------------------
	1. SpringFrameWork 핵심 엔진(lib) 추가
	core
	context
	beans
	expression
	jar 파일 참조 추가
	
	2. 설정(참조)하기
	2.1 xml 파일 설정
	2.2 annotation 설정(권장) . . . Spring은 annotation의 싸움
	
	결론 : 객체의 생성과 조립(xml 설정을 통해서) >> IOC(제어의 역전)
	
	기존)
	어떤 객체가 필요하면 직접했음..
	Emp emp = new Emp();
	
	스프링)
	xml 또는 annotation 을 통해서 미리 객체를 생성해 놓고 사용합니다.
	>> 미리 모든 부품을 만들어 놓고 조립만 해라 --> 스프링
	
	
	
	
	