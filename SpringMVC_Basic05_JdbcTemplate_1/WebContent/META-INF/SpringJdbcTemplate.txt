1. Table 생성
create table usermember(
 id varchar2(20),
 name varchar2(20),
 pwd  varchar2(20),
 email varchar2(20),
 age number
);

2.계정: springuser 비번:1004

3.model(vo,dto,domain : dao)
  view : jsp
  controller : controller 클래스 
4.view > WEB-INF> view > board > board.jsp


5.SpringMVC > 필수 jar 
-기본 : core , beans , expression , aop , context ...
-웹   : web , webmvc 
-의존 : logging ....
-jsp  : jstl
-DB   : ojdbc6.jar

-Spring JDBC : spring-jdbc , spring-tx 추가  > 현실 > ORM (객체 매핑) > JPA , Mybatis
-DB자체가 ORM 구현 >> ORDB > MongoDB (JSON 객체 데이터 저장) > no-sql
*****
ContextLoaderListener 와 DispatcherServlet 은 각각 webapplicationcontext 를 생성하는데
ContextLoaderListener 가 생성한 컨텍스트가 root 컨텍스트가 되고 DispatcherServlet 이 생성한 인스턴스는 root 컨텍스트를 부모로 하는 자식 컨텍스트가 된다.
*****
*****
자식 컨텍스트들은 root 컨텍스트의 [설정 빈]을 사용 할 수 있다.
그러기에 ContextLoaderListener 을 이용 공통빈 설정 가능. (DB작업 , 공통사항)
*****



6. 공통빈 설정하기
   (DB 작업 , JDBC 설정 코드)
 <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
     /WEB-INF/applicationContext.xml
    </param-value>
  </context-param>

참고 dispatcher 가 사용하는 IOC 컨테이너 설정여러개 
   <servlet>
    <servlet-name>dispatcher</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
   <init-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
     classpath:/WEB-INF/base1.xml
     classpath:/WEB-INF/base2.xml
    </param-value>
   </init-param>
   </servlet>


7. dispatcher 설정 (일반 빈 설정 , injection)

8. filter 설정

  
9.applicationContext.xml 공통빈에 
--DB연동
--기존 JDBC API (Connection , Statement , preparestatement , resultset)
--Spring 
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.jdbc.core.JdbcTemplate;

10. view 단 작업 (레이아웃 구성) 

----------------------------------------------------------------------

1. 객체 한건을 리턴하는 경우 (하나의 ROW)
   String sql = "SELECT * FROM NOTICES WHERE SEQ="+seq;
  try {
	return this.template.queryForObject(sql, new 
	BeanPropertyRowMapper<Notice>(Notice.class),sql);
      } catch (EmptyResultDataAccessException e) {
             // EmptyResultDataAccessException 예외 발생시 null 리턴
             return null;
      }
1.1 객체 한건을 리턴하는 경우 (하나의 ROW) > VO 객체 변수명과 select 컬럼명 다를 경우
    String sql = "SELECT * FROM NOTICES WHERE SEQ="+seq;
    return template.queryForObject(sql,
            new Object[]{seq},
            new RowMapper<Notice>(){
       @Override
       public Notice mapRow(ResultSet rs, int rownum)
         throws SQLException {
        Notice n = new Notice();
        //DB컬럼명 num -> notice seq
        n.setSeq(rs.getString("num"));  
        n.setTitle(rs.getString("title2"));
        n.setWriter(rs.getString("w"));
        n.setRegdate(rs.getDate("regdate"));
        n.setHit(rs.getInt("hit"));
        n.setContent(rs.getString("content"));
        n.setFileSrc(rs.getString("fileSrc")); 
        return n;
       }
   
  });    


2. 쿼리결과 단일값인 경우 (그 타입에 래퍼 클래스 타입)
      String sql = "SELECT COUNT(*) CNT FROM NOTICES WHERE "+field+" LIKE ?";
 //쿼리문의 결과가 단일값 (sum() ,max() ,min(), count(*) 
 //return template.queryForInt(sql,"%"+query+"%");
 return template.queryForObject(sql, Integer.class,"%"+query+"%");


4, 여러개의 ROW 를 리턴하는 경우
   String sql = "SELECT * FROM";
  sql += "(SELECT ROWNUM NUM, N.* FROM (SELECT * FROM NOTICES WHERE "+field+" LIKE ? ORDER BY REGDATE DESC) N)";
  sql += "WHERE NUM BETWEEN ? AND ?";
  
  //객체를 (vo) 객체에 담아서 처리하기
  //query 는 배열로 리턴 (목록 출력하기)
  return template.query(sql, 
      new Object[]{"%"+query+"%" ,srow ,erow}, 
      new BeanPropertyRowMapper<Notice>(Notice.class));


5. Insert ,update ,delete
    String sql = "UPDATE NOTICES SET CONTENT=?, FILESRC=? WHERE SEQ=?";
      return template.update(sql, notice.getContent(),  notice.getFileSrc() , notice.getSeq());

